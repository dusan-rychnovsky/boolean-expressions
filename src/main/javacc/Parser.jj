
options {
  STATIC = false;
}

PARSER_BEGIN(ExpressionParser)
  package cz.dusanrychnovsky.booleanexpressions;

  import java.io.*;
  import static java.nio.charset.StandardCharsets.UTF_8;
  import org.joda.time.LocalDate;
  import org.joda.time.ReadablePartial;

  public class ExpressionParser {

    public ExpressionParser() {
      this(new StringReader(""));
    }

    public Expression parse(InputStream in) throws ParseException {
      ReInit(in);
      return Start();
    }

    public Expression parse(String str) throws ParseException {
      return parse(new ByteArrayInputStream(str.getBytes(UTF_8)));
    }

    private enum Operator {
      EQ, LT, GT, GTE, LTE
    }

    private enum Type {
      INT, DATE
    }

    private class Leaf<T> {
      private final Type type;
      private final Value<T> value;

      public Leaf(Type type, Value<T> value) {
        this.type = type;
        this.value = value;
      }

      public Type getType() {
        return type;
      }

      private Value<T> getValue() {
        return value;
      }
    }

    private class RelationBuilder {
      private Expression build(Operator op, Leaf left, Leaf right) throws ParseException {

        if (left.getType() != right.getType()) {
          throw new ParseException("Incompatible types " + left.getType() + " vs " + right.getType());
        }

        return buildComp(op, left.getValue(), right.getValue());
      }

      private <T extends Comparable<T>> Expression buildComp(Operator op, Value<T> left, Value<T> right) {
        switch (op) {
          case EQ: return new Eq<T>(left, right);
          case LT: return new Lt<T>(left, right);
          case LTE: return new Lte<T>(left, right);
          case GT: return new Gt<T>(left, right);
          case GTE: return new Gte<T>(left, right);
          default:
            throw new AssertionError("Unexpected operator: " + op);
        }
      }
    }
  }
PARSER_END(ExpressionParser)

SKIP : { " " }
TOKEN : { < AND : "AND" > }
TOKEN : { < OR : "OR" > }
TOKEN : { < EQ : "=" > }
TOKEN : { < LT : "<" > }
TOKEN : { < GT : ">" > }
TOKEN : { < GTE : ">=" > }
TOKEN : { < LTE : "<=" > }
TOKEN : { < CINT : (["0"-"9"])+ > }
TOKEN : { < LPAR : "(" > }
TOKEN : { < RPAR : ")" > }
TOKEN : { < DATE : "DATE" > }
TOKEN : { < CDATE : (["0"-"9"]){4}"-"(["0"-"9"]){2}"-"(["0"-"9"]){2} > }
TOKEN : { < DAYDIFF : "DAYDIFF" > }
TOKEN : { < COMMA : "," > }

Expression Start():
{ }
{
  { return Expression(); }
  <EOF>
}

Expression Expression():
{
    Expression left, right = null;
}
{
  { left = Term(); }
  (
    <AND>
    { right = Term(); }
  )?

  {
    if (right != null) {
      return new And(left, right);
    }
    else {
      return left;
    }
  }
}

Expression Term():
{
  Expression left, right = null;
}
{
  { left = Factor(); }
  (
    <OR>
    { right = Factor(); }
  )?

  {
    if (right != null) {
      return new Or(left, right);
    }
    else {
      return left;
    }
  }
}

Expression Factor():
{
  Expression e;
}
{
  (
    <LPAR>
    { e = Expression(); }
    <RPAR>
  |
    { e = Relation(); }
  )

  { return e; }
}

Expression Relation():
{
  Token t;
  Operator op;
  Leaf left, right;
}
{
  { left = Leaf(); }

  (
    <EQ>
    { op = Operator.EQ; }
  |
    <LT>
    { op = Operator.LT; }
  |
    <GT>
    { op = Operator.GT; }
  |
    <GTE>
    { op = Operator.GTE; }
  |
    <LTE>
    { op = Operator.LTE; }
  )

  {
    right = Leaf();
    return new RelationBuilder().build(op, left, right);
  }
}

Leaf Leaf():
{
  Token t1, t2;
}
{
  (
    t1 = <CINT>
    {
      return new Leaf(
        Type.INT,
        new Const<Integer>(Integer.parseInt(t1.image))
      );
    }
  |
    <DATE>
    <LPAR>
    t1 = <CDATE>
    <RPAR>
    {
      return new Leaf(
        Type.DATE,
        new Const<ReadablePartial>(new LocalDate(t1.image))
      );
    }
  |
    <DAYDIFF>
    <LPAR>
    t1 = <CDATE>
    <COMMA>
    t2 = <CDATE>
    <RPAR>
    {
      return new Leaf(
        Type.INT,
        new DayDiff(
          new LocalDate(t1.image),
          new LocalDate(t2.image)
        )
      );
    }
  )
}
