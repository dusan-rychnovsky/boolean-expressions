
options {
  STATIC = false;
}

PARSER_BEGIN(Parser)
  package cz.dusanrychnovsky.booleanexpressions;

  import java.io.*;
  import static java.nio.charset.StandardCharsets.UTF_8;

  public class Parser {

    public Parser() {
      this(new StringReader(""));
    }

    public Expression parseExpression(InputStream in) throws ParseException {
      ReInit(in);
      return Start();
    }

    public Expression parseExpression(String str) throws ParseException {
      return parseExpression(new ByteArrayInputStream(str.getBytes(UTF_8)));
    }

    private enum Operator {
      EQ, LT, GT, GTE, LTE
    }
  }
PARSER_END(Parser)

SKIP : { " " }
TOKEN : { < EQ : "=" > }
TOKEN : { < LT : "<" > }
TOKEN : { < GT : ">" > }
TOKEN : { < GTE : ">=" > }
TOKEN : { < LTE : "<=" > }
TOKEN : { < CINT : (["0"-"9"])+ > }

Expression Start():
{
  Token t;
  Operator op;
}
{
  t = <CINT>
  { int left = Integer.parseInt(t.image); }

  (
    <EQ>
    { op = Operator.EQ; }
  |
    <LT>
    { op = Operator.LT; }
  |
    <GT>
    { op = Operator.GT; }
  |
    <GTE>
    { op = Operator.GTE; }
  |
    <LTE>
    { op = Operator.LTE; }
  )

  t = <CINT>
  { int right = Integer.parseInt(t.image); }

  {
    switch (op) {
      case EQ: return new Eq<Integer>(left, right);
      case LT: return new Lt<Integer>(left, right);
      case GT: return new Gt<Integer>(left, right);
      case GTE: return new Gte<Integer>(left, right);
      case LTE: return new Lte<Integer>(left, right);
      default:
        throw new AssertionError("Unexpected operator: " + op);
    }
  }
}
