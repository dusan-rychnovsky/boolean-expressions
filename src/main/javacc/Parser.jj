
options {
  STATIC = false;
}

PARSER_BEGIN(ExpressionParser)
  package cz.dusanrychnovsky.booleanexpressions;

  import java.io.*;
  import static java.nio.charset.StandardCharsets.UTF_8;

  public class ExpressionParser {

    public ExpressionParser() {
      this(new StringReader(""));
    }

    public Expression parse(InputStream in) throws ParseException {
      ReInit(in);
      return Start();
    }

    public Expression parse(String str) throws ParseException {
      return parse(new ByteArrayInputStream(str.getBytes(UTF_8)));
    }

    private enum Operator {
      EQ, LT, GT, GTE, LTE
    }
  }
PARSER_END(ExpressionParser)

SKIP : { " " }
TOKEN : { < AND : "AND" > }
TOKEN : { < OR : "OR" > }
TOKEN : { < EQ : "=" > }
TOKEN : { < LT : "<" > }
TOKEN : { < GT : ">" > }
TOKEN : { < GTE : ">=" > }
TOKEN : { < LTE : "<=" > }
TOKEN : { < CINT : (["0"-"9"])+ > }
TOKEN : { < LPAR : "(" > }
TOKEN : { < RPAR : ")" > }

Expression Start():
{ }
{
  { return Expression(); }
  <EOF>
}

Expression Expression():
{
    Expression left, right = null;
}
{
  { left = Term(); }
  (
    <AND>
    { right = Term(); }
  )?

  {
    if (right != null) {
      return new And(left, right);
    }
    else {
      return left;
    }
  }
}

Expression Term():
{
  Expression left, right = null;
}
{
  { left = Factor(); }
  (
    <OR>
    { right = Factor(); }
  )?

  {
    if (right != null) {
      return new Or(left, right);
    }
    else {
      return left;
    }
  }
}

Expression Factor():
{
  Expression e;
}
{
  (
    <LPAR>
    { e = Expression(); }
    <RPAR>
  |
    { e = Relation(); }
  )

  { return e; }
}

Expression Relation():
{
  Token t;
  Operator op;
}
{
  t = <CINT>
  { int left = Integer.parseInt(t.image); }

  (
    <EQ>
    { op = Operator.EQ; }
  |
    <LT>
    { op = Operator.LT; }
  |
    <GT>
    { op = Operator.GT; }
  |
    <GTE>
    { op = Operator.GTE; }
  |
    <LTE>
    { op = Operator.LTE; }
  )

  t = <CINT>
  { int right = Integer.parseInt(t.image); }

  {
    switch (op) {
      case EQ: return new Eq<Integer>(left, right);
      case LT: return new Lt<Integer>(left, right);
      case GT: return new Gt<Integer>(left, right);
      case GTE: return new Gte<Integer>(left, right);
      case LTE: return new Lte<Integer>(left, right);
      default:
        throw new AssertionError("Unexpected operator: " + op);
    }
  }
}
